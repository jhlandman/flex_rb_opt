[
["rbportch.html", "4 Overview of risk-based portfolios 4.1 Risk-based portfolio types 4.2 Risk-based portfolio properties 4.3 Code", " 4 Overview of risk-based portfolios There are many types of risk-based portfolios, for a broader analysis refer to Plessis and Rensburg (2017). In this chapter, we review three risk-based portfolios: the global minimum variance, equal weight and equal risk contribution portfolios. The risk properties that these portfolios have, the strategies that bear them out and the conditions under which they perform optimally are all covered. 4.1 Risk-based portfolio types Each risk-based portfolio is optimal in some sense because they all minimise a specific objective risk function. The nature of the objective function depends on the investor’s risk preferences. In line with Markowitz (1952), a genetic risk metric to minimise is the portfolio variance, as an investor may not be willing to tolerate large swings in capital value. Setting \\(f(\\cdot|\\textbf{X}) = w^\\intercal \\Sigma w\\) in portfolio optimisation (??) yields the global minimum variance (GMV) portfolio, denoted \\(w_\\textrm{gmv}\\). The objective function is the same as for the MVO portfolio for an imputed value of \\(c\\), meaning that the GMV portfolio sits on the efficient frontier. The GMV portfolio is also the only risk-based portfolio that is always on the efficient frontier. Maillard, Roncalli, and Teı̈letche (2010) utilise the concept of an asset’s marginal risk contribution (MRC) in a portfolio to perform risk-based portfolio calculations. It is the sensitivity of the portfolio volatility to the weight of an asset in a portfolio. Alternative representations of the MRC and an outline of why the weighted sum of the MRC’s is minimised for the GMV portfolio are shown in appendix insert appendix ref. Below is the mathematical definition of the MRC for the \\(i^{\\mathrm{th}}\\) asset: \\[\\begin{align} \\frac{\\partial}{\\partial w_i} \\Big [ \\sigma(w) \\Big ]= \\frac{(\\Sigma w)_i}{\\sqrt{w^\\intercal \\Sigma w}}. \\end{align}\\] When taking the realised portfolio returns as the single risk factor, there is no idiosyncratic risk present for assets in the portfolio against this factor. Accordingly, the GMV portfolio is the lowest possible beta portfolio. The GMV portfolio is, therefore, optimal for the investor that always takes on the least risk at the margin. However, risk has to be estimated, so the investor only knows what the least risky options available to them are in a historical sense. The downside is that always choosing the lowest marginal risk contributing asset is implicitly displaying a high level of confidence in estimations of risk. Contrastingly, the investor may be at a loss when estimating risk. The only measure of diversification for such an investor is weight diversification. To minimise their risk taken at the margin, this investor would hold the smallest possible weight in each of the assets while still satisfying the constraints. This strategy ensures that the investor avoids the maximum marginal risk contributing asset to the greatest extent possible given that they are unsure which of the \\(N\\) assets it is. The least weight concentrated portfolio that this strategy alludes to is the equal weight (EW) portfolio: \\[\\begin{align} w_{ew} &amp; = \\Big [\\frac{1}{N} \\; \\cdot \\cdot \\cdot \\frac{1}{N} \\Big ]^\\intercal \\; , \\end{align}\\] where the weight diversification measure that this portfolio maximises is the inverse Herfindahl index (IHI), calculated as \\(H^{-1} (w) = (\\sum_{i = 1}^N w_i^2)^{-1}\\). The most weight concentrated portfolio is the single asset portfolio - where a single non-zero asset weight is \\(1\\). The IHI of this portfolio is \\(1\\), which is as low as it can be. On the other hand, the EW portfolio has an IHI value of \\(N\\). All portfolios, therefore, have an IHI on the interval \\([1, N]\\). In the presence of a maximum weight constraint, the lower bound of the interval changes. The new lower bound is derived in appendix insert appendix ref. To find the EW portfolio using framework (??), set the objective function to the Herfindahl index, \\(f(\\cdot|\\textbf{X}) = \\sum_{i = 1}^N w_i^2\\). No parameters in the objective function require estimation, so this is a sample return independent optimisation, which reflects the investor’s lack of confidence in historical data. The GMV and EW portfolios represent two extremes of investors, specifically those that value volatility reduction only and those that value weight diversification only. The inequality \\(\\sigma(w_{gmv}) \\leq \\sigma(w^\\diamond) \\leq \\sigma(w_{ew})\\) verifies this intuition. The portfolio \\(w^\\diamond\\) has intermediate weight concentration. Proof of the inequality is given in appendix insert appendix ref. It is unlikely that a capital allocator will completely disregard one risk-based approach for another. One method to construct a sound intermediate portfolio that incorporates the MRC philosophy from the GMV portfolio construction and the high risk-asset avoidance philosophy from the EW portfolio construction is to equalise the total risk contribution (TRC) from each asset. An asset’s TRC is the product of its MRC and its weight in the portfolio: \\[\\begin{align*} \\text{TRC}_i &amp;= w_i \\cdot \\frac{\\partial}{\\partial w_i} \\Big [ \\sigma(w)\\Big ], \\\\ &amp; = \\frac{w_i \\cdot (\\Sigma w)_i}{\\sqrt{w^\\intercal \\Sigma w}}, \\end{align*}\\] where TRC’s sum to the portfolio volatility. An equal risk contribution (ERC) portfolio equalises all of the TRC’s so that no single asset is a comparatively significant contributor to risk. The choice of \\(f(\\cdot|\\textbf{X})\\) that minimises the squared distances between the TRC’s to the greatest extent possible is given below: \\[\\begin{align} f(w, \\Sigma|\\textbf{X}) &amp;= \\sum_{i = 1}^N \\sum_{j \\geq i}^N(w_i(\\Sigma w)_i - w_j(\\Sigma w)_j)^2 \\;\\; . \\end{align}\\] Maillard, Roncalli, and Teı̈letche (2010) show that a log-constraint on the weights in GMV optimisation could equivalently express this choice of \\(f(\\cdot| \\textbf{X})\\) - an idea explored further in appendix insert appendix ref. Therein it is shown that the ERC portfolio is an intermediate portfolio \\(w^\\diamond\\). While there are several other risk-based portfolios that have been suggested in the literature, we will focus our attention only on these three portfolios, which are arguably some of the most common risk-based portfolios seen in practice Jurczenko, Michel, and Teiletche (2013). 4.2 Risk-based portfolio properties Section 3.1 introduces the Markowitz efficient frontier. Sharpe (1964) extends this work to deduce that there is an optimal portfolio called the tangency portfolio. He does make certain assumptions about investors’ preferences and the presence of a risk-free asset. The market-weighted (MW) portfolio is the portfolio for which the efficient frontier is tangential to the line bisecting the y-axis at the risk-free rate (\\(r_\\mathrm{f}\\)) in the expected return-volatility plane. The MW portfolio is the portfolio held by all investors in the market on average and is relevant because it offers the investor diversification with negligible transaction costs Perold (2007). The MW portfolio is not risk-based in the traditional sense, but it does not require an estimate of expected returns to calculate; hence, the MW portfolio offers a cheap benchmark against which to compare risk-based portfolio performance. However, the holder of the MW does implicitly adopt all investors’ weighted expectations of expected returns Haugen and Baker (1991). The tangency portfolio is optimal for the Sharpe ratio (SR) measure under Sharpe’s assumptions. The measure is defined as: \\[\\begin{align} \\text{SR}_\\mathrm{p} = \\frac{\\mathbb{E}[R_\\mathrm{p}] - r_\\mathrm{f}}{\\mathbb{SD}[R_\\mathrm{p}]} \\;. \\end{align}\\] Within the MVO construction, the MW portfolio has the maximum Sharpe ratio (MSR) and is, therefore, the MSR portfolio. Scherer (2007) shows that the MSR portfolio, \\(w_\\mathrm{msr}\\), can alternatively be expressed as the portfolio for which marginal excess returns and the MRC’s are equal for all portfolio constituents. Jurczenko, Michel, and Teiletche (2013) use this fact to find MSR optimality conditions for each of the risk-based portfolios, some examples of which are shown in appendix insert appendix num. Table 4.1 summarises the salient risk properties of the EW, ERC, and GMV portfolios. Included is the strategy to find the portfolio, the requirements for when the portfolio coincides with the MSR portfolio, and their empirical risk characteristics. The risk characteristics entail whether the risk is inherent to the investment, the construction of the portfolio, or liquidity restrictions when creating the portfolio. Table 4.1: Risk-based investing portfolio properties Jurczenko, Michel, and Teiletche (2013) Portfolio Strategy MSR conditions Risk characteristics EW Equalise \\(w_i\\) Identical excess returns. Identical volatilities. Identical correlations. Medium to high risk. Insensitive to \\(\\Sigma\\). Low turnover. ERC Equalise \\(TRC_i\\) Identical Sharpe ratios. Identical correlations. Medium risk. Moderately sensitive to \\(\\Sigma\\). Medium turnover. GMV Equalise \\(MRC_i\\) Identical excess returns. Lowest risk. Highly sensitive to \\(\\Sigma\\). High turnover. While the MSR conditions are theoretically compelling, out-of-sample optimality is harder to determine in practice. Haugen and Baker (1991) show that portfolios that are superior to the MW portfolio exist when: short-selling is restricted, investments are taxed, and foreign investors are active market participants. These portfolios should have the same expected return as the MW portfolio with lower volatility. Their statement is true even in an `efficient market’. Studies of the historical performance show that some portfolios outperform others. In these studies, the authors restrict the asset universe to US equities; hence, their results will not necessarily translate to South Africa. The hope of introducing risk-based portfolios is to find Haugen and Baker’s superior portfolios. Evidence supporting this ambition exists. DeMiguel, Garlappi, and Uppal (2007) demonstrate the robust out-of-sample performance of EW portfolios when compared to MVO and MW portfolios for a broad range of asset universes. Clarke, De Silva, and Thorley (2006) also demonstrate that GMV portfolios show outperformance against the MW and MVO benchmarks. They initially attribute this to the diachronic persistence of covariances when compared to expected returns. In a later paper, Clarke, De Silva, and Thorley (2011) suggest that the outperformance is due to a bias inherent in the portfolio construction towards stocks that do not move with the rest of the market, but that still have comparatively high expected returns. Within risk-based portfolios, Kritzman, Page, and Turkington (2010) have shown that GMV portfolios outperform EW portfolios when the implementer uses a long enough estimation window. Therefore, they establish a defence for using optimisation on a sample covariance matrix. This research remains consistent with these findings, using the EW portfolio as a benchmark in pursuit of better out-of-sample performance within the GMV and ERC frameworks. In the next chapter, we outline the techniques used to achieve this aim. 4.3 Code 4.3.1 MW portfolio library(rlang) library(magrittr) library(dplyr) library(data.table) library(tidyr) full_ret &lt;- readRDS(&quot;data/full_ret.rds&quot;) mw_month_rebal &lt;- full_ret %&gt;% group_by(.data$month_index) %&gt;% filter(.data$date == min(date)) %&gt;% ungroup() %&gt;% mutate(top40_ret_contrib = .data$month_ret * .data$top40_weight) %&gt;% mutate(top100_ret_contrib = .data$month_ret * .data$top100_weight) %&gt;% group_by(.data$month_index) %&gt;% mutate(top40_total_ret = sum(.data$top40_ret_contrib)) %&gt;% mutate(top100_total_ret = sum(.data$top100_ret_contrib)) %&gt;% ungroup() %&gt;% select( .data$month_index, .data$name, .data$month_ret, .data$top40_weight, .data$top40_ret_contrib, .data$top40_total_ret, .data$top100_weight, .data$top100_ret_contrib, .data$top100_total_ret ) saveRDS(mw_month_rebal, file = &quot;data/port_out/mw_month_rebal.rds&quot;) head(mw_month_rebal) ## # A tibble: 6 x 9 ## month_index name month_ret top40_weight top40_ret_contrib top40_total_ret top100_weight top100_ret_contrib top100_total_ret ## &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 199602 ABI 0.0133 0 0 -0.0315 0.00104 0.0000139 -0.0292 ## 2 199602 AXL 0.0436 0 0 -0.0315 0 0 -0.0292 ## 3 199602 ACL 0.0218 0 0 -0.0315 0 0 -0.0292 ## 4 199602 ACT 0.0833 0 0 -0.0315 0 0 -0.0292 ## 5 199602 ADR 0.250 0 0 -0.0315 0.0000499 0.0000125 -0.0292 ## 6 199602 AEL -0.265 0 0 -0.0315 0 0 -0.0292 4.3.2 EW portfolio library(rlang) library(magrittr) library(dplyr) library(data.table) library(tidyr) full_ret &lt;- readRDS(&quot;data/full_ret.rds&quot;) ew_month_rebal &lt;- full_ret %&gt;% group_by(.data$month_index) %&gt;% filter(.data$date == min(date)) %&gt;% ungroup() %&gt;% mutate(ew40_weight = if_else(.data$top40_weight &gt; 0, 1 / 40, 0)) %&gt;% mutate(ew100_weight = if_else(.data$top100_weight &gt; 0, 1 / 100, 0)) %&gt;% mutate(ew40_ret_contrib = .data$month_ret * .data$ew40_weight) %&gt;% mutate(ew100_ret_contrib = .data$month_ret * .data$ew100_weight) %&gt;% group_by(.data$month_index) %&gt;% mutate(ew40_total_ret = sum(.data$ew40_ret_contrib)) %&gt;% mutate(ew100_total_ret = sum(.data$ew100_ret_contrib)) %&gt;% ungroup() %&gt;% select( .data$month_index, .data$name, .data$month_ret, .data$ew40_weight, .data$ew40_ret_contrib, .data$ew40_total_ret, .data$ew100_weight, .data$ew100_ret_contrib, .data$ew100_total_ret ) saveRDS(ew_month_rebal, file = &quot;data/port_out/ew_month_rebal.rds&quot;) head(ew_month_rebal) ## # A tibble: 6 x 9 ## month_index name month_ret ew40_weight ew40_ret_contrib ew40_total_ret ew100_weight ew100_ret_contrib ew100_total_ret ## &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 199602 ABI 0.0133 0 0 -0.0314 0.01 0.000133 -0.00955 ## 2 199602 AXL 0.0436 0 0 -0.0314 0 0 -0.00955 ## 3 199602 ACL 0.0218 0 0 -0.0314 0 0 -0.00955 ## 4 199602 ACT 0.0833 0 0 -0.0314 0 0 -0.00955 ## 5 199602 ADR 0.250 0 0 -0.0314 0.01 0.00250 -0.00955 ## 6 199602 AEL -0.265 0 0 -0.0314 0 0 -0.00955 4.3.3 GMV portfolio library(rlang) library(magrittr) library(dplyr) library(data.table) library(tidyr) library(purrr) library(matrixNormal) library(Matrix) library(quadprog) model_rebal_dat &lt;- readRDS(&quot;data/model_rebal_dat.rds&quot;) full_ret &lt;- readRDS(&quot;data/full_ret.rds&quot;) alpha = 0.1 sum_w = 1 # Helper functions --------------------------------------------------------------------------------- get_cov &lt;- function(chopped_df) { out &lt;- chopped_df %&gt;% select(.data$date, .data$name, .data$week_ret) %&gt;% pivot_wider(id_cols = c(&quot;date&quot;, &quot;name&quot;), names_from = c(&quot;name&quot;), values_from = c(&quot;week_ret&quot;)) %&gt;% select(-.data$date) %&gt;% cov() return(out) } filter_n_size &lt;- function(df_in, weight_col_name) { last_date &lt;- df_in[df_in$date == max(df_in$date),] n_ids &lt;- last_date[pull(last_date, weight_col_name) &gt; 0,]$name filtered &lt;- df_in[df_in$name %in% n_ids,] return(filtered) } get_gmv_weights &lt;- function(Dmat_in){ if (matrixNormal::is.positive.definite(Dmat_in)) { Dmat &lt;- Dmat_in } else { Dmat &lt;- Matrix::nearPD(Dmat_in)$mat print(&quot;used a near positive definite matrix&quot;) } n &lt;- nrow(Dmat) dvec &lt;- matrix(rep(0, times = n), nrow = n, ncol=1) A.Equality &lt;- matrix(rep(c(1), times = n), ncol=1) Amat &lt;- cbind(A.Equality, diag(n), -diag(n)) bvec &lt;- c(sum_w, rep(0, n), rep(-alpha, n)) qp &lt;- solve.QP(Dmat, dvec, Amat, bvec, meq=1) df &lt;- tibble(name = colnames(Dmat), weights = qp$solution) df$weights[df$weights &lt; 0] &lt;- 0 return(df) } flatten_out &lt;- function(list_df_in, names_idx, col_id) { names(list_df_in) &lt;- names_idx df_out &lt;- dplyr::bind_rows(list_df_in, .id = col_id) return(df_out) } # portfolio optimisation --------------------------------------------------------------------------- covars40 &lt;- map(model_rebal_dat$data, filter_n_size, &quot;histadj_top40_weight&quot;) %&gt;% map(get_cov) # not sure how to get the weights over here weights40 &lt;- covars40 %&gt;% map(get_gmv_weights) %&gt;% flatten_out(model_rebal_dat$month_index, &quot;month_index&quot;) %&gt;% select(.data$month_index, .data$name, gmv40_weight = weights) %&gt;% mutate(month_index = as.integer(.data$month_index)) covars100 &lt;- map(model_rebal_dat$data, filter_n_size, &quot;histadj_top100_weight&quot;) %&gt;% map(get_cov) weights100 &lt;- covars100 %&gt;% map(get_gmv_weights) %&gt;% flatten_out(model_rebal_dat$month_index, &quot;month_index&quot;) %&gt;% select(.data$month_index, .data$name, gmv100_weight = weights) %&gt;% mutate(month_index = as.integer(.data$month_index)) gmv_month_rebal &lt;- full_ret %&gt;% group_by(.data$month_index, .data$name) %&gt;% filter(.data$date == min(.data$date)) %&gt;% left_join(weights40, by = c(&#39;month_index&#39;, &#39;name&#39;)) %&gt;% left_join(weights100, by = c(&#39;month_index&#39;, &#39;name&#39;)) min_period &lt;- min(as.integer(weights40$month_index)) gmv_month_rebal &lt;- gmv_month_rebal %&gt;% filter(.data$month_index &gt;= min_period) %&gt;% mutate(gmv40_weight = data.table::nafill(.data$gmv40_weight, fill = 0)) %&gt;% mutate(gmv100_weight = data.table::nafill(.data$gmv100_weight, fill = 0)) %&gt;% select( .data$month_index, .data$name, .data$month_ret, .data$gmv40_weight, .data$gmv100_weight, ) %&gt;% mutate(gmv40_ret_contrib = .data$month_ret * .data$gmv40_weight) %&gt;% mutate(gmv100_ret_contrib = .data$month_ret * .data$gmv100_weight) %&gt;% group_by(.data$month_index) %&gt;% mutate(gmv40_total_ret = sum(.data$gmv40_ret_contrib)) %&gt;% mutate(gmv100_total_ret = sum(.data$gmv100_ret_contrib)) %&gt;% ungroup() saveRDS(gmv_month_rebal, file = &quot;data/port_out/gmv_month_rebal.rds&quot;) head(gmv_month_rebal) ## # A tibble: 6 x 9 ## month_index name month_ret gmv40_weight gmv100_weight gmv40_ret_contrib gmv100_ret_contrib gmv40_total_ret gmv100_total_ret ## &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 200310 ABI 0.0400 0. 1.35e- 2 0. 5.39e- 4 0.0504 0.0921 ## 2 200310 AXL 0.138 5.71e-20 0. 7.88e-21 0. 0.0504 0.0921 ## 3 200310 ACL 0.133 0. 1.14e-17 0. 1.51e-18 0.0504 0.0921 ## 4 200310 ACP 0.121 0. 0. 0. 0. 0.0504 0.0921 ## 5 200310 ACT 0 0. 0. 0. 0. 0.0504 0.0921 ## 6 200310 ADH 0.109 0. 0. 0. 0. 0.0504 0.0921 4.3.4 ERC portfolio library(rlang) library(magrittr) library(dplyr) library(data.table) library(tidyr) library(purrr) library(matrixNormal) library(Matrix) library(quadprog) model_rebal_dat &lt;- readRDS(&quot;data/model_rebal_dat.rds&quot;) full_ret &lt;- readRDS(&quot;data/full_ret.rds&quot;) alpha = 0.1 sum_w = 1 # Helper functions --------------------------------------------------------------------------------- get_cov &lt;- function(chopped_df) { out &lt;- chopped_df %&gt;% select(.data$date, .data$name, .data$week_ret) %&gt;% pivot_wider(id_cols = c(&quot;date&quot;, &quot;name&quot;), names_from = c(&quot;name&quot;), values_from = c(&quot;week_ret&quot;)) %&gt;% select(-.data$date) %&gt;% cov() return(out) } filter_n_size &lt;- function(df_in, weight_col_name) { last_date &lt;- df_in[df_in$date == max(df_in$date),] n_ids &lt;- last_date[pull(last_date, weight_col_name) &gt; 0,]$name filtered &lt;- df_in[df_in$name %in% n_ids,] return(filtered) } # portfolio optimisation --------------------------------------------------------------------------- covars40 &lt;- map(model_rebal_dat$data, filter_n_size, &quot;histadj_top40_weight&quot;) %&gt;% map(get_cov) References "]
]
